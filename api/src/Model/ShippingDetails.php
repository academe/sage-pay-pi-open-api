<?php

namespace Academe\SagePay\PiSdk\Model;

/**
 * ShippingDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Academe\SagePay\PiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * sagePay API Documentation
 *
 * $ref: 'description.md'
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

use ArrayAccess;
use JsonSerializable;
use Academe\SagePay\PiSdk\ObjectSerializer;

/**
 * ShippingDetails Class Doc Comment
 *
 * @category Class
 * @description The &#x60;shippingDetails&#x60; object is used to specify the shipping address details for a transaction. If not provided the values provided in the &#x60;billingAddress&#x60; object will be used for shipping information instead.
 * @package  Academe\SagePay\PiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ShippingDetails implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShippingDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'recipientFirstName' => 'string',
        'recipientLastName' => 'string',
        'shippingAddress1' => 'string',
        'shippingAddress2' => 'string',
        'shippingCity' => 'string',
        'shippingPostalCode' => 'string',
        'shippingCountry' => 'string',
        'shippingState' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'recipientFirstName' => null,
        'recipientLastName' => null,
        'shippingAddress1' => null,
        'shippingAddress2' => null,
        'shippingCity' => null,
        'shippingPostalCode' => null,
        'shippingCountry' => null,
        'shippingState' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Attributes of form: local name => original name
     * Local name is camelCase, original name is as per API description
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'recipientFirstName' => 'recipientFirstName',
        'recipientLastName' => 'recipientLastName',
        'shippingAddress1' => 'shippingAddress1',
        'shippingAddress2' => 'shippingAddress2',
        'shippingCity' => 'shippingCity',
        'shippingPostalCode' => 'shippingPostalCode',
        'shippingCountry' => 'shippingCountry',
        'shippingState' => 'shippingState'
    ];

    /**
     * Attributes to setter functions
     *
     * @var string[]
     */
    protected static $setters = [
        'recipientFirstName' => 'setRecipientFirstName',
        'recipientLastName' => 'setRecipientLastName',
        'shippingAddress1' => 'setShippingAddress1',
        'shippingAddress2' => 'setShippingAddress2',
        'shippingCity' => 'setShippingCity',
        'shippingPostalCode' => 'setShippingPostalCode',
        'shippingCountry' => 'setShippingCountry',
        'shippingState' => 'setShippingState'
    ];

    /**
     * Array of attributes to getter functions
     *
     * @var string[]
     */
    protected static $getters = [
        'recipientFirstName' => 'getRecipientFirstName',
        'recipientLastName' => 'getRecipientLastName',
        'shippingAddress1' => 'getShippingAddress1',
        'shippingAddress2' => 'getShippingAddress2',
        'shippingCity' => 'getShippingCity',
        'shippingPostalCode' => 'getShippingPostalCode',
        'shippingCountry' => 'getShippingCountry',
        'shippingState' => 'getShippingState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to accessor functions
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['recipientFirstName'] = $data['recipientFirstName'] ?? null;
        $this->container['recipientLastName'] = $data['recipientLastName'] ?? null;
        $this->container['shippingAddress1'] = $data['shippingAddress1'] ?? null;
        $this->container['shippingAddress2'] = $data['shippingAddress2'] ?? null;
        $this->container['shippingCity'] = $data['shippingCity'] ?? null;
        $this->container['shippingPostalCode'] = $data['shippingPostalCode'] ?? null;
        $this->container['shippingCountry'] = $data['shippingCountry'] ?? null;
        $this->container['shippingState'] = $data['shippingState'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['recipientFirstName'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'recipientFirstName');
        }
        if ($this->container['recipientLastName'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'recipientLastName');
        }
        if ($this->container['shippingAddress1'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'shippingAddress1');
        }
        if ($this->container['shippingCity'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'shippingCity');
        }
        if ($this->container['shippingCountry'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'shippingCountry');
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets recipientFirstName
     *
     * @return string
     */
    public function getRecipientFirstName()
    {
        return $this->get('recipientFirstName');
    }

    /**
     * Sets recipientFirstName
     *
     * @param string $recipientFirstName Recipient’s first names.
     *
     * @return $this
     */
    public function setRecipientFirstName($recipientFirstName)
    {
        $this->container['recipientFirstName'] = $recipientFirstName;

        return $this;
    }

    /**
     * Gets recipientLastName
     *
     * @return string
     */
    public function getRecipientLastName()
    {
        return $this->get('recipientLastName');
    }

    /**
     * Sets recipientLastName
     *
     * @param string $recipientLastName Recipient’s last name.
     *
     * @return $this
     */
    public function setRecipientLastName($recipientLastName)
    {
        $this->container['recipientLastName'] = $recipientLastName;

        return $this;
    }

    /**
     * Gets shippingAddress1
     *
     * @return string
     */
    public function getShippingAddress1()
    {
        return $this->get('shippingAddress1');
    }

    /**
     * Sets shippingAddress1
     *
     * @param string $shippingAddress1 Shipping address line 1.
     *
     * @return $this
     */
    public function setShippingAddress1($shippingAddress1)
    {
        $this->container['shippingAddress1'] = $shippingAddress1;

        return $this;
    }

    /**
     * Gets shippingAddress2
     *
     * @return string|null
     */
    public function getShippingAddress2()
    {
        return $this->get('shippingAddress2');
    }

    /**
     * Sets shippingAddress2
     *
     * @param string|null $shippingAddress2 Shipping address line 2.
     *
     * @return $this
     */
    public function setShippingAddress2($shippingAddress2)
    {
        $this->container['shippingAddress2'] = $shippingAddress2;

        return $this;
    }

    /**
     * Gets shippingCity
     *
     * @return string
     */
    public function getShippingCity()
    {
        return $this->get('shippingCity');
    }

    /**
     * Sets shippingCity
     *
     * @param string $shippingCity Shipping city.
     *
     * @return $this
     */
    public function setShippingCity($shippingCity)
    {
        $this->container['shippingCity'] = $shippingCity;

        return $this;
    }

    /**
     * Gets shippingPostalCode
     *
     * @return string|null
     */
    public function getShippingPostalCode()
    {
        return $this->get('shippingPostalCode');
    }

    /**
     * Sets shippingPostalCode
     *
     * @param string|null $shippingPostalCode Shipping postal code. Not required when `shippingCountry` is `IE`.
     *
     * @return $this
     */
    public function setShippingPostalCode($shippingPostalCode)
    {
        $this->container['shippingPostalCode'] = $shippingPostalCode;

        return $this;
    }

    /**
     * Gets shippingCountry
     *
     * @return string
     */
    public function getShippingCountry()
    {
        return $this->get('shippingCountry');
    }

    /**
     * Sets shippingCountry
     *
     * @param string $shippingCountry Shipping country. Two letter country code defined in [ISO 3166-1](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
     *
     * @return $this
     */
    public function setShippingCountry($shippingCountry)
    {
        $this->container['shippingCountry'] = $shippingCountry;

        return $this;
    }

    /**
     * Gets shippingState
     *
     * @return string|null
     */
    public function getShippingState()
    {
        return $this->get('shippingState');
    }

    /**
     * Sets shippingState
     *
     * @param string|null $shippingState Two letter state code defined in [ISO 3166-2](http://en.wikipedia.org/wiki/ISO_3166-2:US). Required when `shippingCountry` is `US`.
     *
     * @return $this
     */
    public function setShippingState($shippingState)
    {
        $this->container['shippingState'] = $shippingState;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode($this, JSON_PRETTY_PRINT);
    }

    /**
     * Convert to a nested array.
     * This is not an ideal method, and needs to be revisited.
     */
    public function toArray()
    {
        return json_decode(json_encode($this), true);
    }

    /**
     * Return the JSON serialisable data for this model.
     *
     * @return string|object
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * return a property value.
     *
     * @param string $name Name of the property
     * @param mixed $default Value if property is not set
     *
     * @return mixed
     */
    public function get(string $name, $default = null)
    {
        return $this->container[$name] ?? $default;
    }

    /**
     * Hangle magic getter to return properties.
     *
     * @param string $name Name of the property
     *
     * @return mixed
     */
    public function __get($name)
    {
        return $this->get($name);
    }
}
