<?php

namespace Academe\SagePay\PiSdk\Model;

/**
 * AvsCvsCheck
 *
 * PHP version 5
 *
 * @category Class
 * @package  Academe\SagePay\PiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * sagePay API Documentation
 *
 * $ref: 'description.md'
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

use ArrayAccess;
use JsonSerializable;
use Academe\SagePay\PiSdk\ObjectSerializer;

/**
 * AvsCvsCheck Class Doc Comment
 *
 * @category Class
 * @description The &#x60;avsCvcCheck&#x60; object provides information regarding the AVS/CV2 check results.
 * @package  Academe\SagePay\PiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AvsCvsCheck implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AvsCvsCheck';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'address' => 'string',
        'postalCode' => 'string',
        'securityCode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'status' => null,
        'address' => null,
        'postalCode' => null,
        'securityCode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Attributes of form: local name => original name
     * Local name is camelCase, original name is as per API description
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'address' => 'address',
        'postalCode' => 'postalCode',
        'securityCode' => 'securityCode'
    ];

    /**
     * Attributes to setter functions
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'address' => 'setAddress',
        'postalCode' => 'setPostalCode',
        'securityCode' => 'setSecurityCode'
    ];

    /**
     * Array of attributes to getter functions
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'address' => 'getAddress',
        'postalCode' => 'getPostalCode',
        'securityCode' => 'getSecurityCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to accessor functions
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ALL_MATCHED = 'AllMatched';
    const STATUS_SECURITY_CODE_MATCH_ONLY = 'SecurityCodeMatchOnly';
    const STATUS_ADDRESS_MATCH_ONLY = 'AddressMatchOnly';
    const STATUS_NO_MATCHES = 'NoMatches';
    const STATUS_NOT_CHECKED = 'NotChecked';const ADDRESS_MATCHED = 'Matched';
    const ADDRESS_NOT_PROVIDED = 'NotProvided';
    const ADDRESS_NOT_CHECKED = 'NotChecked';
    const ADDRESS_NOT_MATCHED = 'NotMatched';const POSTAL_CODE_MATCHED = 'Matched';
    const POSTAL_CODE_NOT_PROVIDED = 'NotProvided';
    const POSTAL_CODE_NOT_CHECKED = 'NotChecked';
    const POSTAL_CODE_NOT_MATCHED = 'NotMatched';const SECURITY_CODE_MATCHED = 'Matched';
    const SECURITY_CODE_NOT_PROVIDED = 'NotProvided';
    const SECURITY_CODE_NOT_CHECKED = 'NotChecked';
    const SECURITY_CODE_NOT_MATCHED = 'NotMatched';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ALL_MATCHED,
            self::STATUS_SECURITY_CODE_MATCH_ONLY,
            self::STATUS_ADDRESS_MATCH_ONLY,
            self::STATUS_NO_MATCHES,
            self::STATUS_NOT_CHECKED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAddressAllowableValues()
    {
        return [
            self::ADDRESS_MATCHED,
            self::ADDRESS_NOT_PROVIDED,
            self::ADDRESS_NOT_CHECKED,
            self::ADDRESS_NOT_MATCHED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPostalCodeAllowableValues()
    {
        return [
            self::POSTAL_CODE_MATCHED,
            self::POSTAL_CODE_NOT_PROVIDED,
            self::POSTAL_CODE_NOT_CHECKED,
            self::POSTAL_CODE_NOT_MATCHED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecurityCodeAllowableValues()
    {
        return [
            self::SECURITY_CODE_MATCHED,
            self::SECURITY_CODE_NOT_PROVIDED,
            self::SECURITY_CODE_NOT_CHECKED,
            self::SECURITY_CODE_NOT_MATCHED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = $data['status'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['postalCode'] = $data['postalCode'] ?? null;
        $this->container['securityCode'] = $data['securityCode'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'status',
                implode('", "', $allowedValues)
            );
        }

        $allowedValues = $this->getAddressAllowableValues();
        if (!is_null($this->container['address']) && !in_array($this->container['address'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'address',
                implode('", "', $allowedValues)
            );
        }

        $allowedValues = $this->getPostalCodeAllowableValues();
        if (!is_null($this->container['postalCode']) && !in_array($this->container['postalCode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'postalCode',
                implode('", "', $allowedValues)
            );
        }

        $allowedValues = $this->getSecurityCodeAllowableValues();
        if (!is_null($this->container['securityCode']) && !in_array($this->container['securityCode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                'invalid value for "%s", must be one of "%s"',
                'securityCode',
                implode('", "', $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->get('status');
    }

    /**
     * Sets status
     *
     * @param string|null $status The overall check result status.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (! is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'status',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->get('address');
    }

    /**
     * Sets address
     *
     * @param string|null $address The result for address check.
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $allowedValues = $this->getAddressAllowableValues();
        if (! is_null($address) && !in_array($address, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'address',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets postalCode
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->get('postalCode');
    }

    /**
     * Sets postalCode
     *
     * @param string|null $postalCode The result for postal code check.
     *
     * @return $this
     */
    public function setPostalCode($postalCode)
    {
        $allowedValues = $this->getPostalCodeAllowableValues();
        if (! is_null($postalCode) && !in_array($postalCode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'postalCode',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['postalCode'] = $postalCode;

        return $this;
    }

    /**
     * Gets securityCode
     *
     * @return string|null
     */
    public function getSecurityCode()
    {
        return $this->get('securityCode');
    }

    /**
     * Sets securityCode
     *
     * @param string|null $securityCode The result for security code check.
     *
     * @return $this
     */
    public function setSecurityCode($securityCode)
    {
        $allowedValues = $this->getSecurityCodeAllowableValues();
        if (! is_null($securityCode) && !in_array($securityCode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Invalid value for "%s", must be one of "%s"',
                    'securityCode',
                    implode('", "', $allowedValues)
                )
            );
        }
        $this->container['securityCode'] = $securityCode;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode($this, JSON_PRETTY_PRINT);
    }

    /**
     * Convert to a nested array.
     * This is not an ideal method, and needs to be revisited.
     */
    public function toArray()
    {
        return json_decode(json_encode($this), true);
    }

    /**
     * Return the JSON serialisable data for this model.
     *
     * @return string|object
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * return a property value.
     *
     * @param string $name Name of the property
     * @param mixed $default Value if property is not set
     *
     * @return mixed
     */
    public function get(string $name, $default = null)
    {
        return $this->container[$name] ?? $default;
    }

    /**
     * Hangle magic getter to return properties.
     *
     * @param string $name Name of the property
     *
     * @return mixed
     */
    public function __get($name)
    {
        return $this->get($name);
    }
}
