<?php

namespace Academe\SagePay\PiSdk\Model;

/**
 * Card
 *
 * PHP version 5
 *
 * @category Class
 * @package  Academe\SagePay\PiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * sagePay API Documentation
 *
 * $ref: 'description.md'
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

use ArrayAccess;
use JsonSerializable;
use Academe\SagePay\PiSdk\ObjectSerializer;

/**
 * Card Class Doc Comment
 *
 * @category Class
 * @description The &#x60;card&#x60; object represents the credit or debit card details for this transaction.
 * @package  Academe\SagePay\PiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Card implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Card';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'merchantSessionKey' => 'string',
        'cardIdentifier' => 'string',
        'reusable' => 'bool',
        'save' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'merchantSessionKey' => null,
        'cardIdentifier' => null,
        'reusable' => null,
        'save' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Attributes of form: local name => original name
     * Local name is camelCase, original name is as per API description
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchantSessionKey' => 'merchantSessionKey',
        'cardIdentifier' => 'cardIdentifier',
        'reusable' => 'reusable',
        'save' => 'save'
    ];

    /**
     * Attributes to setter functions
     *
     * @var string[]
     */
    protected static $setters = [
        'merchantSessionKey' => 'setMerchantSessionKey',
        'cardIdentifier' => 'setCardIdentifier',
        'reusable' => 'setReusable',
        'save' => 'setSave'
    ];

    /**
     * Array of attributes to getter functions
     *
     * @var string[]
     */
    protected static $getters = [
        'merchantSessionKey' => 'getMerchantSessionKey',
        'cardIdentifier' => 'getCardIdentifier',
        'reusable' => 'getReusable',
        'save' => 'getSave'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to accessor functions
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['merchantSessionKey'] = $data['merchantSessionKey'] ?? null;
        $this->container['cardIdentifier'] = $data['cardIdentifier'] ?? null;
        $this->container['reusable'] = $data['reusable'] ?? false;
        $this->container['save'] = $data['save'] ?? false;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['merchantSessionKey'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'merchantSessionKey');
        }
        if ($this->container['cardIdentifier'] === null) {
            $invalidProperties[] = sprintf('"%s" can\'t be null', 'cardIdentifier');
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchantSessionKey
     *
     * @return string
     */
    public function getMerchantSessionKey()
    {
        return $this->get('merchantSessionKey');
    }

    /**
     * Sets merchantSessionKey
     *
     * @param string $merchantSessionKey The merchant session key used to generate the `cardIdentifier`.
     *
     * @return $this
     */
    public function setMerchantSessionKey($merchantSessionKey)
    {
        $this->container['merchantSessionKey'] = $merchantSessionKey;

        return $this;
    }

    /**
     * Gets cardIdentifier
     *
     * @return string
     */
    public function getCardIdentifier()
    {
        return $this->get('cardIdentifier');
    }

    /**
     * Sets cardIdentifier
     *
     * @param string $cardIdentifier The unique reference of the card you want to charge.
     *
     * @return $this
     */
    public function setCardIdentifier($cardIdentifier)
    {
        $this->container['cardIdentifier'] = $cardIdentifier;

        return $this;
    }

    /**
     * Gets reusable
     *
     * @return bool|null
     */
    public function getReusable()
    {
        return $this->get('reusable');
    }

    /**
     * Sets reusable
     *
     * @param bool|null $reusable A flag to indicate the card identifier is reusable, i.e. it has been created previously.
     *
     * @return $this
     */
    public function setReusable($reusable)
    {
        $this->container['reusable'] = $reusable;

        return $this;
    }

    /**
     * Gets save
     *
     * @return bool|null
     */
    public function getSave()
    {
        return $this->get('save');
    }

    /**
     * Sets save
     *
     * @param bool|null $save A flag to indicate that you want to save the card identifier, i.e. make it reusable.
     *
     * @return $this
     */
    public function setSave($save)
    {
        $this->container['save'] = $save;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode($this, JSON_PRETTY_PRINT);
    }

    /**
     * Convert to a nested array.
     * This is not an ideal method, and needs to be revisited.
     */
    public function toArray()
    {
        return json_decode(json_encode($this), true);
    }

    /**
     * Return the JSON serialisable data for this model.
     *
     * @return string|object
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * return a property value.
     *
     * @param string $name Name of the property
     * @param mixed $default Value if property is not set
     *
     * @return mixed
     */
    public function get(string $name, $default = null)
    {
        return $this->container[$name] ?? $default;
    }

    /**
     * Hangle magic getter to return properties.
     *
     * @param string $name Name of the property
     *
     * @return mixed
     */
    public function __get($name)
    {
        return $this->get($name);
    }
}
