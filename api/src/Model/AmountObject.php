<?php

namespace Academe\SagePay\PiSdk\Model;

/**
 * AmountObject
 *
 * PHP version 5
 *
 * @category Class
 * @package  Academe\SagePay\PiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * sagePay API Documentation
 *
 * $ref: 'description.md'
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

use ArrayAccess;
use JsonSerializable;
use Academe\SagePay\PiSdk\ObjectSerializer;

/**
 * AmountObject Class Doc Comment
 *
 * @category Class
 * @description The &#x60;amount&#x60; object provides information regarding the total, sale and surcharge amounts for the transaction. The &#x60;amount&#x60; is only returned in response to GET requests to the transactions resource.
 * @package  Academe\SagePay\PiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AmountObject implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AmountObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'totalAmount' => 'int',
        'saleAmount' => 'int',
        'surchargeAmount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'totalAmount' => null,
        'saleAmount' => null,
        'surchargeAmount' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Attributes of form: local name => original name
     * Local name is camelCase, original name is as per API description
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'totalAmount' => 'totalAmount',
        'saleAmount' => 'saleAmount',
        'surchargeAmount' => 'surchargeAmount'
    ];

    /**
     * Attributes to setter functions
     *
     * @var string[]
     */
    protected static $setters = [
        'totalAmount' => 'setTotalAmount',
        'saleAmount' => 'setSaleAmount',
        'surchargeAmount' => 'setSurchargeAmount'
    ];

    /**
     * Array of attributes to getter functions
     *
     * @var string[]
     */
    protected static $getters = [
        'totalAmount' => 'getTotalAmount',
        'saleAmount' => 'getSaleAmount',
        'surchargeAmount' => 'getSurchargeAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to accessor functions
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['totalAmount'] = $data['totalAmount'] ?? null;
        $this->container['saleAmount'] = $data['saleAmount'] ?? null;
        $this->container['surchargeAmount'] = $data['surchargeAmount'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets totalAmount
     *
     * @return int|null
     */
    public function getTotalAmount()
    {
        return $this->get('totalAmount');
    }

    /**
     * Sets totalAmount
     *
     * @param int|null $totalAmount The total amount for the transaction that includes any sale or surcharge values.
     *
     * @return $this
     */
    public function setTotalAmount($totalAmount)
    {
        $this->container['totalAmount'] = $totalAmount;

        return $this;
    }

    /**
     * Gets saleAmount
     *
     * @return int|null
     */
    public function getSaleAmount()
    {
        return $this->get('saleAmount');
    }

    /**
     * Sets saleAmount
     *
     * @param int|null $saleAmount The sale amount associated with the cost of goods or services for the transaction.
     *
     * @return $this
     */
    public function setSaleAmount($saleAmount)
    {
        $this->container['saleAmount'] = $saleAmount;

        return $this;
    }

    /**
     * Gets surchargeAmount
     *
     * @return int|null
     */
    public function getSurchargeAmount()
    {
        return $this->get('surchargeAmount');
    }

    /**
     * Sets surchargeAmount
     *
     * @param int|null $surchargeAmount The surcharge amount added to the transaction as per the settings of the account.
     *
     * @return $this
     */
    public function setSurchargeAmount($surchargeAmount)
    {
        $this->container['surchargeAmount'] = $surchargeAmount;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode($this, JSON_PRETTY_PRINT);
    }

    /**
     * Convert to a nested array.
     * This is not an ideal method, and needs to be revisited.
     */
    public function toArray()
    {
        return json_decode(json_encode($this), true);
    }

    /**
     * Return the JSON serialisable data for this model.
     *
     * @return string|object
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * return a property value.
     *
     * @param string $name Name of the property
     * @param mixed $default Value if property is not set
     *
     * @return mixed
     */
    public function get(string $name, $default = null)
    {
        return $this->container[$name] ?? $default;
    }

    /**
     * Hangle magic getter to return properties.
     *
     * @param string $name Name of the property
     *
     * @return mixed
     */
    public function __get($name)
    {
        return $this->get($name);
    }
}
